# Server configuration
server:
  port: 8050
  error:
    include-message: always
  #spring.webflux.base-path=merchant-service
  max-http-header-size: 10KB

resilience4j.circuitbreaker:
  instances:
    customer-service:
      failureRateThreshold: 50
      minimumNumberOfCalls: 10
      slidingWindowType: TIME_BASED
      slidingWindowSize: 10
      waitDurationInOpenState: 50s
      permittedNumberOfCallsInHalfOpenState: 3
      
# logging settings 
logging:
  config: classpath:log4j2.xml
  level:
    root: INFO
    web: DEBUG
    '[org.springframework.data.redis]': DEBUG
    '[com.ndportmann.mdc_webflux]': DEBUG
    
    
#spring.thymeleaf.prefix: classpath:/templates/

# Whether to enable Redis repositories.
spring.data.redis.repositories.enabled: true
spring.profiles.active: dev

spring:
  application:
    name: Spring-Reactive-Microservice
  # Redis DB Configuration
  redis:
    host: localhost
    port: 6379
    database: 0
    password:
    username:  
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: 22a7100de41c7308d346
            client-secret: 05910ab890be29579e9c183443d92e756c450aaf
          keycloak:
            clientId: myclient
            clientSecret: 6f18f222-da3d-4618-b2bc-1b349e9ab08a
            authorization-grant-type: client_credentials
            #Authorization code flow
            #client-name: myclient
            #authorization-grant-type: authorization_code  
            #redirect-uri: http://localhost:8080/login/oauth2/code/           
        provider:
          keycloak:
            token-uri: http://localhost:8190/oauth/token
            #Authorization code flow
            #authorization-uri: http://localhost:8190/oauth/authorize
            #user-info-uri: http://localhost:8190/user
            #user-name-attribute: name
  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive
  mongodb:
    embedded.version: 3.6.2
  rsocket.server.port: 7000
  main.lazy-initialization: true
  
  h2:
    console:
      enabled: true
      path: /h2-console
  jackson: 
    default-property-inclusion: NON_NULL

  datasource:
    name: customer-service
    ### In memory H2 connection string
    jdbc-url: jdbc:h2:mem:testdb;Mode=postgreSQL
    username: sa
    # It needs to be empty for h2 (enter sa into h2-console)
    password: # It needs to be empty for h2
    type: # It needs to be empty for h2
    driver-class-name: org.h2.Driver #it has to be populated to avoid "Failed to load driver in either of HikariConfig class loader or Thread context classloader" error
    ### PostgreSQL
    #jdbc-url: jdbc:postgresql://localhost:5432/customerservice
    #username: postgres
    #password: postgres
    #driver-class-name: org.postgresql.Driver
    tlsEnabled: true
    minimum-idle: 10 # The minimum number of established connections that should be kept in the pool at all times.
    maximum-pool-size: 50 # The maximum number of connections that should be kept in the pool at all times.
    idle-timeout: 30000 # The maximum amount of time in milliseconds that a connection is allowed to sit idle in connection pool
    max-lifetime: 60000 # The maximum lifetime of a connection in the pool

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    pageable:
      page-size: 100

  liquibase:
    change-log: classpath:/changelog/db.changelog-master.xml
    enabled: true

management:
  endpoints:
    web:
      base-path: /monitoring
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: 'ALWAYS'
  health: 
    circuitbreakers: 
      enabled: true

#database configuration.Change these based on your setup
spring.jpa.generate-ddl: true
spring.datasource.url: jdbc:mysql://localhost:3306/spring-security-series?useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username: root
spring.datasource.password: root
spring.datasource.driver-class-name: com.mysql.jdbc.Driver

#secure token configuration
#60 * 60 * 8 // setting as 8 hours,
jdj.secure.token.validity: 28800
site.base.url.http: http://localhost:8080
site.base.url.https: http://localhost:8080

########## SMTP configuration to send out emails ##########
####### Make sure to use the correct SMTP configurations #######
spring.mail.host: hash
spring.mail.port: 587
spring.mail.username: dummy
spring.mail.password: 123456
#spring.mail.properties.mail.smtp.auth: true
#spring.mail.properties.mail.smtp.starttls.enable: true

